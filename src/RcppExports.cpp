// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// laks
List laks(NumericVector date, NumericVector median, double bandwidth, double average, double standard_deviation, bool approximate, double tol);
RcppExport SEXP _nopam_smoothing_laks(SEXP dateSEXP, SEXP medianSEXP, SEXP bandwidthSEXP, SEXP averageSEXP, SEXP standard_deviationSEXP, SEXP approximateSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type date(dateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type median(medianSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type average(averageSEXP);
    Rcpp::traits::input_parameter< double >::type standard_deviation(standard_deviationSEXP);
    Rcpp::traits::input_parameter< bool >::type approximate(approximateSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(laks(date, median, bandwidth, average, standard_deviation, approximate, tol));
    return rcpp_result_gen;
END_RCPP
}
// laks_loo
double laks_loo(NumericVector date, NumericVector median, double bandwidth);
RcppExport SEXP _nopam_smoothing_laks_loo(SEXP dateSEXP, SEXP medianSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type date(dateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type median(medianSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(laks_loo(date, median, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// llks
List llks(NumericVector date, NumericVector median, double bandwidth, double average, double standard_deviation, bool approximate, bool matrix_approach, double tol);
RcppExport SEXP _nopam_smoothing_llks(SEXP dateSEXP, SEXP medianSEXP, SEXP bandwidthSEXP, SEXP averageSEXP, SEXP standard_deviationSEXP, SEXP approximateSEXP, SEXP matrix_approachSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type date(dateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type median(medianSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< double >::type average(averageSEXP);
    Rcpp::traits::input_parameter< double >::type standard_deviation(standard_deviationSEXP);
    Rcpp::traits::input_parameter< bool >::type approximate(approximateSEXP);
    Rcpp::traits::input_parameter< bool >::type matrix_approach(matrix_approachSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(llks(date, median, bandwidth, average, standard_deviation, approximate, matrix_approach, tol));
    return rcpp_result_gen;
END_RCPP
}
// moving_median
List moving_median(NumericVector date, NumericVector median, int bandwidth);
RcppExport SEXP _nopam_smoothing_moving_median(SEXP dateSEXP, SEXP medianSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type date(dateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type median(medianSEXP);
    Rcpp::traits::input_parameter< int >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(moving_median(date, median, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _nopam_smoothing_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _nopam_smoothing_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _nopam_smoothing_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _nopam_smoothing_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// reduce_bias_warnings
LogicalVector reduce_bias_warnings(LogicalVector warnings, int snooze);
RcppExport SEXP _nopam_smoothing_reduce_bias_warnings(SEXP warningsSEXP, SEXP snoozeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type warnings(warningsSEXP);
    Rcpp::traits::input_parameter< int >::type snooze(snoozeSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_bias_warnings(warnings, snooze));
    return rcpp_result_gen;
END_RCPP
}
// reduce_slope_warnings
List reduce_slope_warnings(List data, bool stringent);
RcppExport SEXP _nopam_smoothing_reduce_slope_warnings(SEXP dataSEXP, SEXP stringentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type stringent(stringentSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_slope_warnings(data, stringent));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nopam_smoothing_laks", (DL_FUNC) &_nopam_smoothing_laks, 7},
    {"_nopam_smoothing_laks_loo", (DL_FUNC) &_nopam_smoothing_laks_loo, 3},
    {"_nopam_smoothing_llks", (DL_FUNC) &_nopam_smoothing_llks, 8},
    {"_nopam_smoothing_moving_median", (DL_FUNC) &_nopam_smoothing_moving_median, 3},
    {"_nopam_smoothing_rcpparma_hello_world", (DL_FUNC) &_nopam_smoothing_rcpparma_hello_world, 0},
    {"_nopam_smoothing_rcpparma_outerproduct", (DL_FUNC) &_nopam_smoothing_rcpparma_outerproduct, 1},
    {"_nopam_smoothing_rcpparma_innerproduct", (DL_FUNC) &_nopam_smoothing_rcpparma_innerproduct, 1},
    {"_nopam_smoothing_rcpparma_bothproducts", (DL_FUNC) &_nopam_smoothing_rcpparma_bothproducts, 1},
    {"_nopam_smoothing_reduce_bias_warnings", (DL_FUNC) &_nopam_smoothing_reduce_bias_warnings, 2},
    {"_nopam_smoothing_reduce_slope_warnings", (DL_FUNC) &_nopam_smoothing_reduce_slope_warnings, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_nopam_smoothing(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
