}
# Test datasets
# Some information:
# No1: Alkaline, LOW_2, VITROS_2 from 2021-11-25 to 2022-01-05
# No2: Glucose, LOW_5, Cobas c702 from 2021-10-23 to 2022-01-01
# No3: Creatinine, TOP_1, CH_VITROS1917 from 2021-12-15 to 2022-01-31
# No4: TSH, TOP_2, ML_ATELLICA2_I from 2022-05-15 to 2022-07-17
# No5: Potassium, TOP_2, ML_ATELLICA1_C from 2022-07-10 to 2022-09-18
test_data_1 <- fread(file = "test_data_1.csv")
test_data_2 <- fread(file = "test_data_2.csv")
test_data_3 <- fread(file = "test_data_3.csv")
test_data_4 <- fread(file = "test_data_4.csv")
test_data_5 <- fread(file = "test_data_5.csv")
# Output
# Each of output_1, ..., output_5 is a list containing four elements.
# The first is the array comparing smoothing by LC and LL
# The second is the plot comparing the two smooth curves by LC and LL
# The third is the plot comparing the gradients using LC and LL
# The fourth is the combined plot of the smooth curves and gradients
output_1 <- compare_lc_ll(test_data_1, measure = "median", average = 83.85682, standard_deviation = 19.49721, na_rm = TRUE)
output_2 <- compare_lc_ll(test_data_2, measure = "hyper", average = 0, standard_deviation = 1, na_rm = TRUE)
output_3 <- compare_lc_ll(test_data_3, measure = "median", average = 77.82624, standard_deviation = 16.47868, na_rm = TRUE)
output_4 <- compare_lc_ll(test_data_4, measure = "hypo", average = 0, standard_deviation = 1, na_rm = TRUE)
output_5 <- compare_lc_ll(test_data_5, measure = "median", average = 4.208906, standard_deviation = 0.25089045, na_rm = TRUE)
# PDFs of figures
ggsave(filename = "test_compare_lc_ll_figure_1.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_2.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_3.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_4.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_5.pdf", plot = output_1[[4]], device = "pdf")
# Write CSV-files
fwrite(output_1[[1]], file = "test_compare_lc_ll_1.csv")
fwrite(output_2[[1]], file = "test_compare_lc_ll_2.csv")
fwrite(output_3[[1]], file = "test_compare_lc_ll_3.csv")
fwrite(output_4[[1]], file = "test_compare_lc_ll_4.csv")
fwrite(output_5[[1]], file = "test_compare_lc_ll_5.csv")
ggsave(filename = "test_compare_lc_ll_figure_2.pdf", plot = output_2[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_3.pdf", plot = output_3[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_4.pdf", plot = output_4[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_5.pdf", plot = output_5[[4]], device = "pdf")
1 %in% c(2, 3, 4, 5)
1 == c(2, 3, 4, 5)
devtools::document()
devtools::load_all(".")
# Load packages
library(data.table)
library(stringi)
library(readxl)
library(ggplot2)
library(Rcpp)
library(microbenchmark)
library(pbapply)
library(parallel)
# Set working directory to correct file path
setwd("~/nopam_warnings")
# Load test data
alkaline <- fread(file = "alkaline-phosphatase-from-2021-01-01-to-2023-01-01-raw.csv")
expand_data(data = alkaline)
setwd("~/nopam.smoothing")
devtools::load_all(".")
usethis::use_test(name = "laks")
View(alkaline)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
test_data_1
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
dates
medians <- test_data_1$Median
medians
actual_1 <- laks(dates, medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721)
actual_1
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
dates
actual_1 <- laks(dates, medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE)
actual_1
actual_1 <- laks(dates, medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = TRUE)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03"]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
actual_1 <- laks(dates, medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = TRUE)
actual_1
actual_1 <- laks(dates, medians, bandwidth = 11, average = 83.81988795518207, standard_deviation = 19.532229832627962, approximate = TRUE, diagnostics = TRUE)
actual_1
actual_1 <- laks(dates, medians, bandwidth = 22, average = 83.81988795518207, standard_deviation = 19.532229832627962, approximate = TRUE, diagnostics = TRUE)
actual_1
actual_1 <- laks(dates, medians, bandwidth = 16, average = 83.81988795518207, standard_deviation = 19.532229832627962, approximate = TRUE, diagnostics = TRUE)
actual_1
actual_1 <- laks(dates, medians, bandwidth = 12, average = 83.81988795518207, standard_deviation = 19.532229832627962, approximate = TRUE, diagnostics = TRUE)
actual_1
actual_1 <- laks(dates, medians, bandwidth = 11.5, average = 83.81988795518207, standard_deviation = 19.532229832627962, approximate = TRUE, diagnostics = TRUE)
actual_1
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03"]
test_data_1
kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 11, average = 83.85682, standard_deviation = 19.49721)
kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 11, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE)
View(kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 11, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE))
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03"]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
medians
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03"]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
View(kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 11, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE))
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
View(kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 11, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE))
View(kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 11^2, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE))
View(kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 5, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE))
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03",]
medians <- test_data_1$Median
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
View(kernel_smoothing0(data = test_data_1, method = "lc", measure = "median", bw = 5, average = 83.85682, standard_deviation = 19.49721, na_rm = FALSE))
laks(date = dates, median = medians, bandwidth = 11, average = 0, standard_deviation = 1, approximate = TRUE, diagnostics = FALSE)
devtools::load_all(".")
devtools::load_all(".")
library(data.table)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03",]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 0, standard_deviation = 1, approximate = TRUE, diagnostics = FALSE)
actual_1
library(data.table)
devtools::load_all(".")
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03",]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 0, standard_deviation = 1, approximate = TRUE, diagnostics = FALSE)
laks(date = dates, median = medians, bandwidth = 11, average = 0, standard_deviation = 1, approximate = TRUE, diagnostics = FALSE) |> as.data.table()
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = FALSE) |> as.data.table()
library(nopam.smoothing)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = FALSE) |> as.data.table()
microbenchmark(laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = FALSE))
devtools::load_all(".")
microbenchmark(laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = FALSE))
library(nopam.smoothing)
microbenchmark(laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE))
library(nopam.smoothing)
microbenchmark(laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE))
microbenchmark(laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = TRUE))
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = FALSE)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = TRUE)
devtools::load_all(".")
devtools::load_all(".")
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = TRUE)
devtools::load_all(".")
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03",]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, diagnostics = TRUE)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE)
devtools::load_all(".")
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE)
library(data.table)
library(nopam.smoothing)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE)
devtools::load_all(".")
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.001)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-03"]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.001)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.0001)
test_data_1 <- fread(file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")[`Measured At` <= "2022-01-05"]
dates <- as.numeric(test_data_1$`Measured At` - min(test_data_1$`Measured At`, na.rm = TRUE)) + 1
medians <- test_data_1$Median
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.0001)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.01)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.001)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.01)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.05)
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.01)
?np::npreg()
np::npreg(bws = 11, txdat = dates, tydat = medians)
np::npreg(bws = 11, txdat = dates, tydat = medians)
library(np)
npreg(bws = 11, txdat = dates, tydat = medians)
?npregbw()
npreg(bws = 11, txdat = dates, tydat = medians, regtype = "lc", ckertype = "gaussian")
output <- npreg(bws = 11, txdat = dates, tydat = medians, regtype = "lc", ckertype = "gaussian")
output
View(output)
View(output)
output <- npreg(bws = 11, txdat = dates, tydat = medians, regtype = "lc", ckertype = "gaussian")
output$mean
laks(date = dates, median = medians, bandwidth = 11, average = 83.85682, standard_deviation = 19.49721, approximate = TRUE, tol = 0.01)
?np::nptgauss()
?np::nptgauss(3)
np::nptgauss(3)
lol <- np::nptgauss(3)
View(lol)
lol[[1]]
lol <- np::nptgauss(34)
qnorm(p = 0.01)
lol <- np::nptgauss(2.326)
lol[[1]]
?npreg(bws = 11, txdat = dates, tydat = medians, regtype = "lc", ckertype = "gaussian")
devtools::load_all(".")
# Load packages
library(data.table)
library(readxl)
library(stringi)
library(ggplot2)
library(microbenchmark)
library(pbapply)
library(parallel)
#### Load test data ####
alkaline <- fread(file = "~/nopam_warnings/alkaline-phosphatase-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
creatinine <- fread(file = "~/nopam_warnings/creatinine-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
glucose <- fread(file = "~/nopam_warnings/glucose-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
potassium <- fread(file = "~/nopam_warnings/potassium-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
tsh <- fread(file = "~/nopam_warnings/tsh-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
#### Slope warnings data ####
warning_process_potassium <- xwarning_process(data = potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU",], by = c("Laboratory Code", "Instrument Code"), from = "2021-08-05", to = "2022-12-31", measure = "median", method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_potassium <- kernel_smoothing(data = potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
warning_process_potassium <- merge(kernel_potassium, warning_process_potassium, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_potassium$`Is Warning` <- ifelse(is.na(warning_process_potassium$`Is Warning`), FALSE, warning_process_potassium$`Is Warning`)
warning_process_potassium
warning_process_potassium[is.na(`Evaluated Average`)]
warning_process_tsh <- xwarning_process(data = tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",], from = "2021-07-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_tsh <- kernel_smoothing(data = tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
warning_process_tsh <- merge(kernel_tsh, warning_process_tsh, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_tsh$`Is Warning` <- ifelse(is.na(warning_process_tsh$`Is Warning`), FALSE, warning_process_tsh$`Is Warning`)
warning_process_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], from = "2021-08-21", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_alkaline <- kernel_smoothing(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
warning_process_alkaline <- merge(kernel_alkaline, warning_process_alkaline, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_alkaline$`Is Warning` <- ifelse(is.na(warning_process_alkaline$`Is Warning`), FALSE, warning_process_alkaline$`Is Warning`)
warning_process_glucose <- xwarning_process(data = glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),], from = "2021-02-08", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_glucose <- kernel_smoothing(data = glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
warning_process_glucose <- merge(kernel_glucose, warning_process_glucose, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_glucose$`Is Warning` <- ifelse(is.na(warning_process_glucose$`Is Warning`), FALSE, warning_process_glucose$`Is Warning`)
warning_process_creatinine <- xwarning_process(data = creatinine[`Laboratory Code` == "LOW_4",], from = "2021-02-08", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_creatinine <- kernel_smoothing(data = creatinine[`Laboratory Code` == "LOW_4",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
warning_process_creatinine <- merge(kernel_creatinine, warning_process_creatinine, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_creatinine$`Is Warning` <- ifelse(is.na(warning_process_creatinine$`Is Warning`), FALSE, warning_process_creatinine$`Is Warning`)
ggplot() +
geom_point(data = warning_process_potassium[!is.na(m)], mapping = aes(x = `Measured At`, y = Median, color = `Instrument Code`), shape = 3, alpha = 0.3, size = 0.1, show.legend = TRUE) +
geom_line(data = warning_process_potassium[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = TRUE) +
geom_segment(data = warning_process_potassium[!is.na(m)], mapping = aes(x = `Measured At`, xend = `Measured At`, y = 4, yend = `Smoothed Median`, alpha = `Is Warning`), color = "gray", show.legend = TRUE, linewidth = 0.5) +
geom_point(data = warning_process_potassium[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, alpha = `Is Warning`), color = "black", size = 0.5, show.legend = TRUE) +
scale_y_continuous(limits = c(4, 5)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 2, scales = "free_x") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "6 weeks", limits = c(as.IDate("2021-08-05"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0.001, "TRUE" = 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 30, vjust = 0.5),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_point(data = warning_process_tsh[!is.na(m)], mapping = aes(x = `Measured At`, y = Median, color = `Instrument Code`), shape = 3, alpha = 0.3, size = 0.1, show.legend = TRUE) +
geom_line(data = warning_process_tsh[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = TRUE) +
geom_segment(data = warning_process_tsh[!is.na(m)], mapping = aes(x = `Measured At`, xend = `Measured At`, y = 0, yend = `Smoothed Median`, alpha = `Is Warning`), color = "gray", show.legend = TRUE, linewidth = 0.5) +
geom_point(data = warning_process_tsh[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, alpha = `Is Warning`), color = "black", size = 0.5, show.legend = TRUE) +
scale_y_continuous(limits = c(0, 15)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3, scales = "free_x") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "6 weeks", limits = c(as.IDate("2021-07-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0.001, "TRUE" = 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 30, vjust = 0.5),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_point(data = warning_process_alkaline[!is.na(m)], mapping = aes(x = `Measured At`, y = Median, color = `Instrument Code`), shape = 3, alpha = 0.3, size = 0.1, show.legend = TRUE) +
geom_line(data = warning_process_alkaline[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = TRUE) +
geom_segment(data = warning_process_alkaline[!is.na(m)], mapping = aes(x = `Measured At`, xend = `Measured At`, y = 65, yend = `Smoothed Median`, alpha = `Is Warning`), color = "gray", show.legend = TRUE, linewidth = 0.5) +
geom_point(data = warning_process_alkaline[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, alpha = `Is Warning`), color = "black", size = 0.5, show.legend = TRUE) +
scale_y_continuous(limits = c(65, 100)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3, scales = "free_x") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "6 weeks", limits = c(as.IDate("2021-08-21"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0.001, "TRUE" = 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 30, vjust = 0.5),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-02-01")) +
geom_point(data = warning_process_glucose[!is.na(m)], mapping = aes(x = `Measured At`, y = Median, color = `Instrument Code`), shape = 3, alpha = 0.3, size = 0.1, show.legend = TRUE) +
geom_line(data = warning_process_glucose[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = TRUE) +
geom_segment(data = warning_process_glucose[!is.na(m)], mapping = aes(x = `Measured At`, xend = `Measured At`, y = 5, yend = `Smoothed Median`, alpha = `Is Warning`), color = "gray", show.legend = TRUE, linewidth = 0.5) +
geom_point(data = warning_process_glucose[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, alpha = `Is Warning`), color = "black", size = 0.5, show.legend = TRUE) +
scale_y_continuous(limits = c(5, 5.75)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3, scales = "free_x") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "4 months", limits = c(as.IDate("2021-01-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0.001, "TRUE" = 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-02-01")) +
geom_point(data = warning_process_creatinine[!is.na(m)], mapping = aes(x = `Measured At`, y = Median, color = `Instrument Code`), shape = 3, alpha = 0.3, size = 0.1, show.legend = TRUE) +
geom_line(data = warning_process_creatinine[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = TRUE) +
geom_segment(data = warning_process_creatinine[!is.na(m)], mapping = aes(x = `Measured At`, xend = `Measured At`, y = 60, yend = `Smoothed Median`, alpha = `Is Warning`), color = "gray", show.legend = TRUE, linewidth = 0.5) +
geom_point(data = warning_process_creatinine[!is.na(m)], mapping = aes(x = `Measured At`, y = `Smoothed Median`, alpha = `Is Warning`), color = "black", size = 0.5, show.legend = TRUE) +
scale_y_continuous(limits = c(60, 90)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3, scales = "free_x") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "4 months", limits = c(as.IDate("2021-01-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0.001, "TRUE" = 1)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
bp_potassium <- xwarning_process(data = potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU"], by = c("Laboratory Code", "Instrument Code"), from = "2021-08-05", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_potassium <- bp_potassium[`Measured At` >= "2001-01-01"]
bp_tsh <- xwarning_process(data = tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",], by = c("Laboratory Code", "Instrument Code"), from = "2021-07-01", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_tsh <- bp_tsh[`Measured At` >= "2001-01-01"]
bp_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], by = c("Laboratory Code", "Instrument Code"), from = "2021-08-21", to = "2022-12-31", measure = "median", tol = 10, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_alkaline <- bp_alkaline[`Measured At` >= "2001-01-01"]
bp_glucose <- xwarning_process(data = glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),], by = c("Laboratory Code", "Instrument Code"), from = "2021-01-30", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_glucose <- bp_glucose[`Measured At` >= "2001-01-01"]
bp_creatinine <- xwarning_process(data = creatinine[`Laboratory Code` == "LOW_4",], by = c("Laboratory Code", "Instrument Code"), from = "2021-01-30", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_creatinine <- bp_creatinine[`Measured At` >= "2001-01-01"]
ggplot() +
geom_vline(xintercept = as.IDate("2021-08-05")) +
geom_segment(data = bp_potassium, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Yearly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = bp_potassium, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = bp_potassium, mapping = aes(x = `Measured At`, y = `Yearly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "2 months", limits = c(as.IDate("2021-08-05"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-07-01")) +
geom_segment(data = bp_tsh, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Yearly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = bp_tsh, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = bp_tsh, mapping = aes(x = `Measured At`, y = `Yearly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "2 months", limits = c(as.IDate("2021-07-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-08-21")) +
geom_segment(data = bp_alkaline, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Yearly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = bp_alkaline, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = bp_alkaline, mapping = aes(x = `Measured At`, y = `Yearly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "2 months", limits = c(as.IDate("2021-08-21"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-01-30")) +
geom_segment(data = bp_glucose, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Yearly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = bp_glucose, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = bp_glucose, mapping = aes(x = `Measured At`, y = `Yearly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "4 months", limits = c(as.IDate("2021-01-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3, ncol = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-01-30")) +
geom_segment(data = bp_creatinine, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Yearly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = bp_creatinine, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = bp_creatinine, mapping = aes(x = `Measured At`, y = `Yearly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "4 months", limits = c(as.IDate("2021-01-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
pg_potassium <- xwarning_process(data = potassium, by = c("Laboratory Code", "Instrument Code"), from = "2021-08-05", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_potassium <- pg_potassium[`Measured At` >= "2001-01-01"][`Laboratory Code` == "MID_1" & `Instrument Code` != "AU"]
pg_tsh <- xwarning_process(data = tsh, by = c("Laboratory Code", "Instrument Code"), from = "2021-07-01", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_tsh <- pg_tsh[`Measured At` >= "2001-01-01"][`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",]
pg_alkaline <- xwarning_process(data = alkaline, by = c("Laboratory Code", "Instrument Code"), from = "2021-08-21", to = "2022-12-31", measure = "median", tol = 10, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_alkaline <- pg_alkaline[`Measured At` >= "2001-01-01"][`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000",]
pg_glucose <- xwarning_process(data = glucose, by = c("Laboratory Code", "Instrument Code"), from = "2021-01-30", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_glucose <- pg_glucose[`Measured At` >= "2001-01-01"][`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),]
pg_creatinine <- xwarning_process(data = creatinine, by = c("Laboratory Code", "Instrument Code"), from = "2021-01-30", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_creatinine <- pg_creatinine[`Measured At` >= "2001-01-01"][`Laboratory Code` == "LOW_4",]
ggplot() +
geom_vline(xintercept = as.IDate("2021-08-05")) +
geom_segment(data = pg_potassium, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Peer Group Monthly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = pg_potassium, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = pg_potassium, mapping = aes(x = `Measured At`, y = `Peer Group Monthly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "2 months", limits = c(as.IDate("2021-08-05"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-07-01")) +
geom_segment(data = pg_tsh, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Peer Group Monthly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = pg_tsh, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = pg_tsh, mapping = aes(x = `Measured At`, y = `Peer Group Monthly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "2 months", limits = c(as.IDate("2021-07-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-08-21")) +
geom_segment(data = pg_alkaline, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Peer Group Monthly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = pg_alkaline, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = pg_alkaline, mapping = aes(x = `Measured At`, y = `Peer Group Monthly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "2 months", limits = c(as.IDate("2021-08-21"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-01-30")) +
geom_segment(data = pg_glucose, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Peer Group Monthly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = pg_glucose, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = pg_glucose, mapping = aes(x = `Measured At`, y = `Peer Group Monthly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "4 months", limits = c(as.IDate("2021-01-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 3, ncol = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
ggplot() +
geom_vline(xintercept = as.IDate("2021-01-30")) +
geom_segment(data = pg_creatinine, mapping = aes(x = `Measured At`, xend = `Measured At`, y = `Monthly Median`, yend = `Peer Group Monthly Median`, alpha = `Is Warning`), linewidth = 0.1) +
geom_step(data = pg_creatinine, mapping = aes(x = `Measured At`, y = `Monthly Median`, color = `Instrument Code`)) +
geom_step(data = pg_creatinine, mapping = aes(x = `Measured At`, y = `Peer Group Monthly Median`), color = "black") +
scale_x_date(name = "Date (YYYY-MM-DD)", breaks = "4 months", limits = c(as.IDate("2021-01-01"), as.IDate("2022-12-31"))) +
scale_alpha_manual(values = c("FALSE" = 0, "TRUE" = 0.3)) +
facet_wrap(facets = . ~ `Instrument Code`, nrow = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 20, vjust = 0.9),
axis.ticks.length.x = unit(x = 3, units = "mm"),
legend.position = "bottom",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
strip.background = element_rect(fill = "black"),
strip.text = element_text(face = "bold", color = "white"))
