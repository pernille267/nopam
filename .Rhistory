library(devtools)
document()
pkgload::dev_help('laks')
pkgload::dev_help('llks')
pkgload::dev_help('xgenerate_warnings')
document()
pkgload::dev_help('moving_median')
pkgload::dev_help('reduce_bias_warnings')
pkgload::dev_help('reduce_slope_warnings')
devtools::load_all(".")
devtools::document()
Rcpp::compileAttributes()
devtools::load_all(".")
library(devtools)
usethis::use_agpl3_license()
library(nopam.smoothing)
?kernel_smoothing()
?reduce_bias_warnings
devtools::install_github("pernille267/nopam")
library(nopam.smoothing)
devtools::install_github("pernille267/nopam")
library(nopam.smoothing)
# Load packages
library(data.table)
library(stringi)
library(readxl)
library(ggplot2)
library(Rcpp)
library(cowplot)
library(nopam.smoothing)
# Set working directory to correct file path
setwd("~/nopam_warnings")
# Load test data
alkaline <- fread(file = "alkaline-phosphatase-from-2021-01-01-to-2023-01-01-raw.csv")
creatinine <- fread(file = "creatinine-from-2021-01-01-to-2023-01-01-raw.csv")
glucose <- fread(file = "glucose-from-2021-01-01-to-2023-01-01-raw.csv")
potassium <- fread(file = "potassium-from-2021-01-01-to-2023-01-01-raw.csv")
tsh <- fread(file = "tsh-from-2021-01-01-to-2023-01-01-raw.csv")
# Fill missing dates with NA
#-------------------------------------------------------------------------------
id_cols <- c("Analyte Name", "Country", "Manufacturer Name", "Instrument Model Name", "Laboratory Code", "Instrument Id", "Instrument Code")
date_col <- "Measured At"
measurement_cols <- c("Median", "Hyper Percentage", "Hypo Percentage")
alkaline_list <- split(x = alkaline, by = id_cols, keep.by = TRUE, sorted = FALSE)
creatinine_list <- split(x = creatinine, by = id_cols, keep.by = TRUE, sorted = FALSE)
glucose_list <- split(x = glucose, by = id_cols, keep.by = TRUE, sorted = FALSE)
potassium_list <- split(x = potassium, by = id_cols, keep.by = TRUE, sorted = FALSE)
tsh_list <- split(x = tsh, by = id_cols, keep.by = TRUE, sorted = FALSE)
expand_group_data <- function(data, id_cols) {
# Generate date sequence for this group
all_dates <- seq(min(data[[date_col]]), max(data[[date_col]]), by = "1 day")
# Number of rows for each id combination
n_rows <- length(all_dates)
# Create expanded data for this group
expanded_group_data <- CJ("Measured At" = all_dates)
for (id in id_cols) {
expanded_group_data[[id]] <- rep(data[[id]][1], n_rows)
}
# Merge with original data
out <- merge(expanded_group_data, data, by = c("Measured At", id_cols), all.x = TRUE)
out$`Is Weekend` <- ifelse(weekdays(out$`Measured At`) == "Saturday" | weekdays(out$`Measured At`) == "Sunday", TRUE, FALSE)
out$`Weekday` <- weekdays(out$`Measured At`)
return(out)
}
alkaline <- lapply(X = alkaline_list, FUN = function(x) expand_group_data(x, id_cols = id_cols)) |> rbindlist(idcol = NULL)
creatinine <- lapply(X = creatinine_list, FUN = function(x) expand_group_data(x, id_cols = id_cols)) |> rbindlist(idcol = NULL)
glucose <- lapply(X = glucose_list, FUN = function(x) expand_group_data(x, id_cols = id_cols)) |> rbindlist(idcol = NULL)
potassium <- lapply(X = potassium_list, FUN = function(x) expand_group_data(x, id_cols = id_cols)) |> rbindlist(idcol = NULL)
tsh <- lapply(X = tsh_list, FUN = function(x) expand_group_data(x, id_cols = id_cols)) |> rbindlist(idcol = NULL)
#-------------------------------------------------------------------------------
# Only works for one instrument within one lab!
compare_lc_ll <- function(data, measure = c("median", "hyper", "hypo"), average = 0, standard_deviation = 1, na_rm = FALSE){
measure <- measure[1]
if(measure == "median"){
tol <- 2
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Median"), suffixes = c(".LC", ".LL"))
}
else if(measure == "hyper"){
tol <- 8
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Hyper Percentage"), suffixes = c(".LC", ".LL"))
}
else if(measure == "hypo"){
tol <- 8
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Hypo Percentage"), suffixes = c(".LC", ".LL"))
}
warning_date <- max(data$`Measured At`, na.rm = TRUE) + 1
start_date <- min(data$`Measured At`, na.rm = TRUE)
end_date <- max(data$`Measured At`, na.rm = TRUE) + 7
smooth_plot <- ggplot() +
geom_point(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = m), shape = 21, fill = "gray", color = "black", alpha = 0.2) +
geom_line(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = sm, color = "LC")) +
geom_line(data = kernel_smoothing_ll, mapping = aes(x = `Measured At`, y = sm, color = "LL")) +
geom_vline(xintercept = warning_date) +
labs(color = "Smoothing Type") +
scale_x_date(name = "Measured At", breaks = seq(from = start_date, to = end_date, by = "1 week"), limits = c(start_date, end_date)) +
scale_y_continuous(name = measure, n.breaks = 10) +
scale_color_manual(values = c("LL" = "red", "LC" = "#28A745")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "top")
gradient_plot <- ggplot() +
geom_hline(yintercept = c(-tol, tol)) +
geom_line(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Istvan)")) +
geom_point(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Istvan)")) +
geom_line(data = kernel_smoothing_lcs, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Pernille)")) +
geom_line(data = kernel_smoothing_ll, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LL (Slope)")) +
geom_vline(xintercept = warning_date) +
labs(color = "Smoothing Type (Gradient estimator)") +
scale_x_date(name = "Measured At", breaks = seq(from = start_date, to = end_date, by = "1 week"), limits = c(start_date, end_date)) +
scale_y_continuous(name = paste(measure, "slope degrees"), n.breaks = 10) +
scale_color_manual(values = c("LL (Slope)" = "red", "LC (Istvan)" = "#28A745", "LC (Pernille)" = "orange")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "bottom")
combined_plot <- plot_grid(plotlist = list(smooth_plot, gradient_plot), nrow = 2)
return(list(lc_vs_ll, smooth_plot, gradient_plot, combined_plot))
}
# Test datasets
test_data_1 <- alkaline[`Laboratory Code` == "LOW_2" & `Instrument Code` == "VITROS_2" & `Measured At` >= "2021-11-25" & `Measured At` <= "2022-01-05",]
test_data_2 <- glucose[`Laboratory Code` == "LOW_5" & `Instrument Code` == "Cobas c702" & `Measured At` >= "2021-10-23" & `Measured At` <= "2022-01-01"]
test_data_3 <- creatinine[`Laboratory Code` == "TOP_1" & `Instrument Code` == "CH_VITROS1917" &  `Measured At` >= "2021-12-15" & `Measured At` <= "2022-01-31"]
test_data_4 <- tsh[`Laboratory Code` == "TOP_2" & `Instrument Code` == "ML_ATELLICA2_I" &  `Measured At` >= "2022-05-15" & `Measured At` <= "2022-07-17"]
test_data_5 <- potassium[`Laboratory Code` == "TOP_2" & `Instrument Code` == "ML_ATELLICA1_C" & `Measured At` >= "2022-07-10" & `Measured At` <= "2022-09-18"]
# Illustrations
output_1 <- compare_lc_ll(test_data_1, measure = "median", average = 83.85682, standard_deviation = 19.49721, na_rm = TRUE)
output_1
# Test datasets
test_data_1 <- alkaline[`Laboratory Code` == "LOW_2" & `Instrument Code` == "VITROS_2" & `Measured At` >= "2021-11-25" & `Measured At` <= "2022-01-05",]
test_data_2 <- glucose[`Laboratory Code` == "LOW_5" & `Instrument Code` == "Cobas c702" & `Measured At` >= "2021-10-23" & `Measured At` <= "2022-01-01"]
test_data_3 <- creatinine[`Laboratory Code` == "TOP_1" & `Instrument Code` == "CH_VITROS1917" &  `Measured At` >= "2021-12-15" & `Measured At` <= "2022-01-31"]
test_data_4 <- tsh[`Laboratory Code` == "TOP_2" & `Instrument Code` == "ML_ATELLICA2_I" &  `Measured At` >= "2022-05-15" & `Measured At` <= "2022-07-17"]
test_data_5 <- potassium[`Laboratory Code` == "TOP_2" & `Instrument Code` == "ML_ATELLICA1_C" & `Measured At` >= "2022-07-10" & `Measured At` <= "2022-09-18"]
test_data_5
# Load packages
library(devtools)
installed.packages()
"nopam.smoothing" %in% installed.packages()
fwrite(x = test_data_1, file = "~/nopam_warnings/lc_ll_demo/test_data_1.csv")
fwrite(x = test_data_2, file = "~/nopam_warnings/lc_ll_demo/test_data_2.csv")
fwrite(x = test_data_3, file = "~/nopam_warnings/lc_ll_demo/test_data_3.csv")
fwrite(x = test_data_4, file = "~/nopam_warnings/lc_ll_demo/test_data_4.csv")
fwrite(x = test_data_5, file = "~/nopam_warnings/lc_ll_demo/test_data_5.csv")
output_1[[1]]
output_1[[2]]
# Load packages
library(devtools)
library(data.table)
library(stringi)
library(readxl)
library(ggplot2)
library(Rcpp)
library(cowplot)
# Checks if nopam.smoothing is installed, and install if not.
if(!"nopam.smoothing" %in% installed.packages()){
install_github(repo = "pernille267/nopam")
}
# Load special nopam package
library(nopam.smoothing)
# Set working directory to correct file path
setwd("~/nopam_warnings/lc_ll_demo")
# Only works for one instrument within one lab!
compare_lc_ll <- function(data, measure = c("median", "hyper", "hypo"), average = 0, standard_deviation = 1, na_rm = FALSE){
measure <- measure[1]
if(measure == "median"){
tol <- 2
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Median"), suffixes = c(".LC", ".LL"))
}
else if(measure == "hyper"){
tol <- 8
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Hyper Percentage"), suffixes = c(".LC", ".LL"))
}
else if(measure == "hypo"){
tol <- 8
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Hypo Percentage"), suffixes = c(".LC", ".LL"))
}
warning_date <- max(data$`Measured At`, na.rm = TRUE) + 1
start_date <- min(data$`Measured At`, na.rm = TRUE)
end_date <- max(data$`Measured At`, na.rm = TRUE) + 7
smooth_plot <- ggplot() +
geom_point(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = m), shape = 21, fill = "gray", color = "black", alpha = 0.2) +
geom_line(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = sm, color = "LC")) +
geom_line(data = kernel_smoothing_ll, mapping = aes(x = `Measured At`, y = sm, color = "LL")) +
geom_vline(xintercept = warning_date) +
labs(color = "Smoothing Type") +
scale_x_date(name = "Measured At", breaks = seq(from = start_date, to = end_date, by = "1 week"), limits = c(start_date, end_date)) +
scale_y_continuous(name = measure, n.breaks = 10) +
scale_color_manual(values = c("LL" = "red", "LC" = "#28A745")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "top")
gradient_plot <- ggplot() +
geom_hline(yintercept = c(-tol, tol)) +
geom_line(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Istvan)")) +
geom_point(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Istvan)")) +
geom_line(data = kernel_smoothing_lcs, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Pernille)")) +
geom_line(data = kernel_smoothing_ll, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LL (Slope)")) +
geom_vline(xintercept = warning_date) +
labs(color = "Smoothing Type (Gradient estimator)") +
scale_x_date(name = "Measured At", breaks = seq(from = start_date, to = end_date, by = "1 week"), limits = c(start_date, end_date)) +
scale_y_continuous(name = paste(measure, "slope degrees"), n.breaks = 10) +
scale_color_manual(values = c("LL (Slope)" = "red", "LC (Istvan)" = "#28A745", "LC (Pernille)" = "orange")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "bottom")
combined_plot <- plot_grid(plotlist = list(smooth_plot, gradient_plot), nrow = 2)
return(list(lc_vs_ll, smooth_plot, gradient_plot, combined_plot))
}
# Test datasets
# Some information:
# No1: Alkaline, LOW_2, VITROS_2 from 2021-11-25 to 2022-01-05
# No2: Glucose, LOW_5, Cobas c702 from 2021-10-23 to 2022-01-01
# No3: Creatinine, TOP_1, CH_VITROS1917 from 2021-12-15 to 2022-01-31
# No4: TSH, TOP_2, ML_ATELLICA2_I from 2022-05-15 to 2022-07-17
# No5: Potassium, TOP_2, ML_ATELLICA1_C from 2022-07-10 to 2022-09-18
test_data_1 <- fread(file = "test_data_1.csv")
test_data_2 <- fread(file = "test_data_2.csv")
test_data_3 <- fread(file = "test_data_3.csv")
test_data_4 <- fread(file = "test_data_4.csv")
test_data_5 <- fread(file = "test_data_5.csv")
output_1 <- compare_lc_ll(test_data_1, measure = "median", average = 83.85682, standard_deviation = 19.49721, na_rm = TRUE)
output_2 <- compare_lc_ll(test_data_2, measure = "hyper", average = 0, standard_deviation = 1, na_rm = TRUE)
output_2[[1]]
# To access each element use output_#[[i]]. See examples below
output_1[[4]]
output_2[[1]]
# Load packages
library(devtools)
library(data.table)
library(stringi)
library(readxl)
library(ggplot2)
library(Rcpp)
library(cowplot)
# Checks if nopam.smoothing is installed, and install if not.
if(!"nopam.smoothing" %in% installed.packages()){
install_github(repo = "pernille267/nopam")
}
# Load special nopam package
library(nopam.smoothing)
# Set working directory to correct file path
setwd("~/nopam_warnings/lc_ll_demo")
# Only works for one instrument within one lab!
compare_lc_ll <- function(data, measure = c("median", "hyper", "hypo"), average = 0, standard_deviation = 1, na_rm = FALSE){
measure <- measure[1]
if(measure == "median"){
tol <- 2
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = average, standard_deviation = standard_deviation, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Median"), suffixes = c(".LC", ".LL"))
}
else if(measure == "hyper"){
tol <- 8
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Hyper Percentage"), suffixes = c(".LC", ".LL"))
}
else if(measure == "hypo"){
tol <- 8
kernel_smoothing_lc <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = TRUE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_lcs <- kernel_smoothing0(data = data, method = "lc", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
kernel_smoothing_ll <- kernel_smoothing0(data = data, method = "ll", measure = measure, bw = 11, average = 0, standard_deviation = 1, attach = "y", approximate = FALSE, matrix_approach = TRUE, na_rm = na_rm)
lc_vs_ll <- merge(kernel_smoothing_lc[,-c("m", "sm")], kernel_smoothing_ll[,-c("m", "sm")], by = c("Measured At", "Hypo Percentage"), suffixes = c(".LC", ".LL"))
}
warning_date <- max(data$`Measured At`, na.rm = TRUE) + 1
start_date <- min(data$`Measured At`, na.rm = TRUE)
end_date <- max(data$`Measured At`, na.rm = TRUE) + 7
smooth_plot <- ggplot() +
geom_point(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = m), shape = 21, fill = "gray", color = "black", alpha = 0.2) +
geom_line(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = sm, color = "LC")) +
geom_line(data = kernel_smoothing_ll, mapping = aes(x = `Measured At`, y = sm, color = "LL")) +
geom_vline(xintercept = warning_date) +
labs(color = "Smoothing Type") +
scale_x_date(name = "Measured At", breaks = seq(from = start_date, to = end_date, by = "1 week"), limits = c(start_date, end_date)) +
scale_y_continuous(name = measure, n.breaks = 10) +
scale_color_manual(values = c("LL" = "red", "LC" = "#28A745")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "top")
gradient_plot <- ggplot() +
geom_hline(yintercept = c(-tol, tol)) +
geom_line(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Istvan)")) +
geom_point(data = kernel_smoothing_lc, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Istvan)")) +
geom_line(data = kernel_smoothing_lcs, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LC (Pernille)")) +
geom_line(data = kernel_smoothing_ll, mapping = aes(x = `Measured At`, y = `Smoothed Gradient Degrees`, color = "LL (Slope)")) +
geom_vline(xintercept = warning_date) +
labs(color = "Smoothing Type (Gradient estimator)") +
scale_x_date(name = "Measured At", breaks = seq(from = start_date, to = end_date, by = "1 week"), limits = c(start_date, end_date)) +
scale_y_continuous(name = paste(measure, "slope degrees"), n.breaks = 10) +
scale_color_manual(values = c("LL (Slope)" = "red", "LC (Istvan)" = "#28A745", "LC (Pernille)" = "orange")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.position = "bottom")
combined_plot <- plot_grid(plotlist = list(smooth_plot, gradient_plot), nrow = 2)
return(list(lc_vs_ll, smooth_plot, gradient_plot, combined_plot))
}
# Test datasets
# Some information:
# No1: Alkaline, LOW_2, VITROS_2 from 2021-11-25 to 2022-01-05
# No2: Glucose, LOW_5, Cobas c702 from 2021-10-23 to 2022-01-01
# No3: Creatinine, TOP_1, CH_VITROS1917 from 2021-12-15 to 2022-01-31
# No4: TSH, TOP_2, ML_ATELLICA2_I from 2022-05-15 to 2022-07-17
# No5: Potassium, TOP_2, ML_ATELLICA1_C from 2022-07-10 to 2022-09-18
test_data_1 <- fread(file = "test_data_1.csv")
test_data_2 <- fread(file = "test_data_2.csv")
test_data_3 <- fread(file = "test_data_3.csv")
test_data_4 <- fread(file = "test_data_4.csv")
test_data_5 <- fread(file = "test_data_5.csv")
# Output
# Each of output_1, ..., output_5 is a list containing four elements.
# The first is the array comparing smoothing by LC and LL
# The second is the plot comparing the two smooth curves by LC and LL
# The third is the plot comparing the gradients using LC and LL
# The fourth is the combined plot of the smooth curves and gradients
output_1 <- compare_lc_ll(test_data_1, measure = "median", average = 83.85682, standard_deviation = 19.49721, na_rm = TRUE)
output_2 <- compare_lc_ll(test_data_2, measure = "hyper", average = 0, standard_deviation = 1, na_rm = TRUE)
output_3 <- compare_lc_ll(test_data_3, measure = "median", average = 77.82624, standard_deviation = 16.47868, na_rm = TRUE)
output_4 <- compare_lc_ll(test_data_4, measure = "hypo", average = 0, standard_deviation = 1, na_rm = TRUE)
output_5 <- compare_lc_ll(test_data_5, measure = "median", average = 4.208906, standard_deviation = 0.25089045, na_rm = TRUE)
# PDFs of figures
ggsave(filename = "test_compare_lc_ll_figure_1.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_2.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_3.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_4.pdf", plot = output_1[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_5.pdf", plot = output_1[[4]], device = "pdf")
# Write CSV-files
fwrite(output_1[[1]], file = "test_compare_lc_ll_1.csv")
fwrite(output_2[[1]], file = "test_compare_lc_ll_2.csv")
fwrite(output_3[[1]], file = "test_compare_lc_ll_3.csv")
fwrite(output_4[[1]], file = "test_compare_lc_ll_4.csv")
fwrite(output_5[[1]], file = "test_compare_lc_ll_5.csv")
ggsave(filename = "test_compare_lc_ll_figure_2.pdf", plot = output_2[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_3.pdf", plot = output_3[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_4.pdf", plot = output_4[[4]], device = "pdf")
ggsave(filename = "test_compare_lc_ll_figure_5.pdf", plot = output_5[[4]], device = "pdf")
