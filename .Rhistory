mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 25, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 500, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 500, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 500, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 500, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 500, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 700, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 700, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 700, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], inverse_regression = TRUE)$b1 - 1))
Rcpp::sourceCpp("~/dins/ols_regression.cpp")
Rcpp::sourceCpp("~/dins/ols_regression.cpp")
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], include_ci = FALSE)$b1 - 1))
Rcpp::sourceCpp("~/dins/ols_regression.cpp")
test_data <- replicate(n = 1000, simulate_eqa_data(parameters = list(n = 40, R = 3, cvx = 0.10, cvy = 0.10, b1 = 1, cil = 700, ciu = 750)), simplify = FALSE)
impr_data <- lapply(test_data, global_precision_estimates)
mean(sapply(1:length(test_data), FUN = function(x) deming_regression(data = test_data[[x]], lambda = impr_data[[x]]$lambda)$b1 - 1))
mean(sapply(1:length(test_data), FUN = function(x) ols_regression(data = test_data[[x]], include_ci = FALSE)$b1 - 1))
devtools::load_all(".")
# Load packages
library(data.table)
library(readxl)
library(stringi)
library(ggplot2)
library(Rcpp)
library(microbenchmark)
library(pbapply)
library(parallel)
alkaline <- fread(file = "~/nopam_warnings/alkaline-phosphatase-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
creatinine <- fread(file = "~/nopam_warnings/creatinine-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
glucose <- fread(file = "~/nopam_warnings/glucose-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
potassium <- fread(file = "~/nopam_warnings/potassium-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
tsh <- fread(file = "~/nopam_warnings/tsh-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
# Generate all warnings #-------------------------------------------------------
# Gather all analyte results into one list object
analytes <- list(alkaline, creatinine, glucose, potassium, tsh)
# Convert to DT
analytes_dt <- rbindlist(analytes, idcol = NULL)
# Set all warning thresholds
thresholds <- list(c(2,8,8,10,10,10,10),
c(2,8,8,5,5,5,5),
c(2,8,8,5,5,5,5),
c(2,8,8,5,5,5,5),
c(2,8,8,5,5,5,5))
# Make cluster for parallelization
cl <- makeCluster(spec = 5)
clusterEvalQ(cl = cl, expr = {library(data.table);library(nopam.smoothing)})
clusterExport(cl = cl, varlist = c("analytes", "thresholds"))
# Calculate all warnings
all_warnings <- pblapply(X = 1:5, FUN = function(x) xgenerate_warnings(data = analytes[[x]],
tol_median_slope = thresholds[[x]][1],
tol_hyper_slope = thresholds[[x]][2],
tol_hypo_slope = thresholds[[x]][3],
tol_median_bias = thresholds[[x]][4],
tol_hyper_bias = thresholds[[x]][5],
tol_hypo_bias = thresholds[[x]][6],
tol_pg = thresholds[[x]][7], bw1 = 11, bw2 = 30, bw3 = 365), cl = cl)
# Stop that cluster before it makes our lives difficult
stopCluster(cl)
# All results are gather into one DT
all_warnings <- rbindlist(all_warnings)
# Generated warnings ONLY
all_warnings_table <- all_warnings[`Is Warning` == TRUE]
# Set to good order
setorder(all_warnings_table, `Measured At`, `Analyte Name`, `Laboratory Code`, `Warning Type`)
View(all_warnings_table)
# Write to local machine if you want
writexl::write_xlsx(x = all_warnings_table, path = "instrument_warnings_2022_pkf.xlsx")
# Read the expected warnings
expected_warnings <- read_excel(path = "warnings_with_mean_std.xlsx") |> setDT()
# Write to local machine if you want
writexl::write_xlsx(x = all_warnings_table, path = "nopam_warnings/instrument_warnings_2022_pkf.xlsx")
# Write to local machine if you want
writexl::write_xlsx(x = all_warnings_table, path = "~/nopam_warnings/instrument_warnings_2022_pkf.xlsx")
# Read the expected warnings
expected_warnings <- read_excel(path = "~/nopam_warnings/warnings_with_mean_std.xlsx") |> setDT()
# Remove duplicated warnings... if they are there
expected_warnings <- expected_warnings[-which(duplicated(expected_warnings))]
# Convert to correct classes!
expected_warnings[, `:=` (`Warning At` = as.IDate(`Warning At`),
`Measured At` = as.IDate(`Measured At`),
`Monthly Start Date` = as.IDate(`Monthly Start Date`),
`Yearly Start Date` = as.IDate(`Yearly Start Date`),
`Peer Group Start Date` = as.IDate(`Peer Group Start Date`),
`Evaluated Average` = as.numeric(`Evaluated Average`),
`Evaluated Standard Deviation` = as.numeric(`Evaluated Standard Deviation`))]
expected_warnings
# Round the evaluated slopes
expected_warnings$`Evaluated Slopes` <- sapply(stri_split_fixed(expected_warnings$`Evaluated Slopes`, pattern = ", ", n = 3), FUN = function(x) ifelse(test = any(is.na(x)), yes = NA_real_, paste(round(as.numeric(x), 3L), collapse = ", ")))
expected_warnings
# Set to good order
setorder(expected_warnings, `Measured At`, `Analyte Name`, `Laboratory Code`, `Instrument Code`, `Warning Type`)
expected_warnings
View(all_warnings_table)
# Generate warning IDs for generated warnings for both expected warnings and actual warnings
expected_warning_ids <- paste(expected_warnings$`Warning At`, expected_warnings$`Analyte Name`, expected_warnings$`Instrument Code`, expected_warnings$`Laboratory Code`, expected_warnings$`Warning Type`, sep = " * ")
actual_warning_ids <- paste(all_warnings_table$`Warning At`, all_warnings_table$`Analyte Name`, all_warnings_table$`Instrument Code`, all_warnings_table$`Laboratory Code`, all_warnings_table$`Warning Type`, sep = " * ")
# How many warnings agree?
sum(expected_warning_ids %in% actual_warning_ids)
sum(actual_warning_ids %in% expected_warning_ids)
same_expected <- expected_warnings[which(expected_warning_ids %in% actual_warning_ids)]
same_actual <- all_warnings_table[which(actual_warning_ids %in% expected_warning_ids)]
same_expected
all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)][!is.na(`Peer Group Monthly Median`),]
expected_warnings[which(!expected_warning_ids %in% actual_warning_ids)][!is.na(`Peer Group Monthly Median`),]
all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)][!is.na(`Yearly Median`),]
expected_warnings[which(!expected_warning_ids %in% actual_warning_ids)][!is.na(`Yearly Median`),]
View(all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)][!is.na(`Evaluated Days`),])
View(all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)][!is.na(`Evaluated Days`),])
not_same_expected <- expected_warnings[which(!expected_warning_ids %in% actual_warning_ids)]
not_same_expected
not_same_expected <- expected_warnings[which(!expected_warning_ids %in% actual_warning_ids)]
not_same_actual <- all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)]
not_same_actual
not_same_peer_group_actual <- not_same_actual[!is.na(`Peer Group Monthly Median`),]
not_same_peer_group_actual
not_same_peer_group_expected <- not_same_expected[!is.na(`Peer Group Monthly Median`),]
not_same_peer_group_expected
# Entries with warnings that disagree for the bias warning
not_same_bias_expected <- not_same_expected[!is.na(`Yearly Median`),]
not_same_bias_actual <- not_same_actual[!is.na(`Yearly Median`),]
not_same_bias_actual
not_same_peer_group_actual
not_same_bias_expected
all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)][!is.na(`Yearly Median`),]
expected_warnings[which(!expected_warning_ids %in% actual_warning_ids)][!is.na(`Yearly Median`),]
# Entries with warnings that disagree for the slope warning
not_same_bias_expected <- not_same_expected[!is.na(`Evaluated Days`),]
not_same_bias_actual <- not_same_actual[!is.na(`Evaluated Days`),]
not_same_bias_expected
not_same_bias_actual
# Entries with warnings that disagree for the bias warning
not_same_bias_expected <- not_same_expected[!is.na(`Yearly Median`),]
not_same_bias_actual <- not_same_actual[!is.na(`Yearly Median`),]
# Entries with warnings that disagree for the slope warning
not_same_slope_expected <- not_same_expected[!is.na(`Evaluated Days`),]
not_same_slope_actual <- not_same_actual[!is.na(`Evaluated Days`),]
expected_warnings <- read_excel(path = "~/nopam_warnings/warnings_with_mean_std.xlsx") |> setDT()
# Remove duplicated warnings... if they are there
expected_warnings <- expected_warnings[-which(duplicated(expected_warnings))]
# Convert to correct classes!
expected_warnings[, `:=` (`Warning At` = as.IDate(`Warning At`),
`Measured At` = as.IDate(`Measured At`),
`Monthly Start Date` = as.IDate(`Monthly Start Date`),
`Yearly Start Date` = as.IDate(`Yearly Start Date`),
`Peer Group Start Date` = as.IDate(`Peer Group Start Date`),
`Evaluated Average` = as.numeric(`Evaluated Average`),
`Evaluated Standard Deviation` = as.numeric(`Evaluated Standard Deviation`))]
# Round the evaluated slopes
expected_warnings$`Evaluated Slopes` <- sapply(stri_split_fixed(expected_warnings$`Evaluated Slopes`, pattern = ", ", n = 3), FUN = function(x) ifelse(test = any(is.na(x)), yes = NA_real_, paste(round(as.numeric(x), 3L), collapse = ", ")))
# Set to good order
setorder(expected_warnings, `Measured At`, `Analyte Name`, `Laboratory Code`, `Instrument Code`, `Warning Type`)
# Generate warning IDs for generated warnings for both expected warnings and actual warnings
expected_warning_ids <- paste(expected_warnings$`Warning At`, expected_warnings$`Analyte Name`, expected_warnings$`Instrument Code`, expected_warnings$`Laboratory Code`, expected_warnings$`Warning Type`, sep = " * ")
actual_warning_ids <- paste(all_warnings_table$`Warning At`, all_warnings_table$`Analyte Name`, all_warnings_table$`Instrument Code`, all_warnings_table$`Laboratory Code`, all_warnings_table$`Warning Type`, sep = " * ")
# How many warnings agree?
sum(expected_warning_ids %in% actual_warning_ids)
sum(actual_warning_ids %in% expected_warning_ids)
# Entries with warnings that agree
same_expected <- expected_warnings[which(expected_warning_ids %in% actual_warning_ids)]
same_actual <- all_warnings_table[which(actual_warning_ids %in% expected_warning_ids)]
# Entries with warnings that disagree
not_same_expected <- expected_warnings[which(!expected_warning_ids %in% actual_warning_ids)]
not_same_actual <- all_warnings_table[which(!actual_warning_ids %in% expected_warning_ids)]
# Entries with warnings that disagree for the peer group warning
not_same_peer_group_expected <- not_same_expected[!is.na(`Peer Group Monthly Median`),]
not_same_peer_group_actual <- not_same_actual[!is.na(`Peer Group Monthly Median`),]
# Entries with warnings that disagree for the bias warning
not_same_bias_expected <- not_same_expected[!is.na(`Yearly Median`),]
not_same_bias_actual <- not_same_actual[!is.na(`Yearly Median`),]
# Entries with warnings that disagree for the slope warning
not_same_slope_expected <- not_same_expected[!is.na(`Evaluated Days`),]
not_same_slope_actual <- not_same_actual[!is.na(`Evaluated Days`),]
not_same_slope_actual
not_same_slope_expected
head(not_same_slope_actual)
not_same_slope_actual[100]
as.IDate("2022-01-24") - 38
example_1 <- tsh[`Laboratory Code` == "TOP_3" & `Instrument Code` == "A40AL1" & `Measured At` <= "2022-01-24" & `Measured At` >= "2021-12-17"]
example_1
alkaline[`Laboratory Code` == "MID_2" & `Instrument Code` == "A2-B" & `Measured At` <= "2022-01-08" & `Measured At` >= "2021-12-05"]
alkaline[`Laboratory Code` == "MID_2" & `Instrument Code` == "A2-B" & `Measured At` <= "2022-01-08" & `Measured At` >= "2021-12-01"]
not_same_slope_actual <- not_same_actual[!is.na(`Evaluated Days`),]
not_same_slope_actual
View(all_warnings_table)
View(not_same_slope_actual)
kernel_smoothing0(data = example_1, method = "lc", measure = "median", bw = 11, average = 81.3302, standard_deviation = 1.8043, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
example_1 <- alkaline[`Laboratory Code` == "MID_2" & `Instrument Code` == "A2-B" & `Measured At` <= "2022-01-08" & `Measured At` >= "2021-12-01"]
kernel_smoothing0(data = example_1, method = "lc", measure = "median", bw = 11, average = 81.3302, standard_deviation = 1.8043, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
example_1_a <- copy(example_1)
example_1_a$Median <- ifelse(is.na(example_1_a$Median), 0, example_1_a$Median)
kernel_smoothing0(data = example_1_a, method = "lc", measure = "median", bw = 11, average = 81.3302, standard_deviation = 1.8043, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
example_1_b <- copy(example_1)
example_1_b$Median <- (example_1_b$Median - 81.3302) / 1.8043
kernel_smoothing0(data = example_1_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
example_1 <- alkaline[`Laboratory Code` == "MID_2" & `Instrument Code` == "A2-B" & `Measured At` <= "2022-01-08" & `Measured At` >= "2021-12-01"]
example_1_a <- copy(example_1)
example_1_a$Median <- ifelse(is.na(example_1_a$Median), 0, example_1_a$Median)
example_1_b <- copy(example_1)
example_1_b$Median <- (example_1_b$Median - 81.3302) / 1.8043
example_2 <- tsh[`Laboratory Code` == "TOP_3" & `Instrument Code` == "A40AL1" & `Measured At` <= "2022-01-24" & `Measured At` >= "2021-12-17"]
smooth_example_1 <- kernel_smoothing0(data = example_1, method = "lc", measure = "median", bw = 11, average = 81.3302, standard_deviation = 1.8043, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_1_a <- kernel_smoothing0(data = example_1_a, method = "lc", measure = "median", bw = 11, average = 81.3302, standard_deviation = 1.8043, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_1_b <- kernel_smoothing0(data = example_1_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_1
smooth_example_1_a
smooth_example_1_b
smooth_example_1
not_same_slope_actual[100]
example_2 <- tsh[`Laboratory Code` == "TOP_3" & `Instrument Code` == "A40AL1" & `Measured At` <= "2022-01-24" & `Measured At` >= "2021-12-17"]
smooth_example_2 <- kernel_smoothing0(data = example_2, method = "lc", measure = "median", bw = 11, average = 1.64235, standard_deviation = 0.1394292, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_2
example_2 <- tsh[`Laboratory Code` == "TOP_3" & `Instrument Code` == "A40AL1" & `Measured At` <= "2022-01-24" & `Measured At` >= "2021-12-17"]
example_2_a <- copy(example_2)
example_2_a$Median <- ifelse(is.na(example_2_a$Median), 0, example_2_a$Median)
example_2_b <- copy(example_2)
example_2_b$Median <- (example_2_b$Median - 1.64235) / 0.1394292
example_2 <- tsh[`Laboratory Code` == "TOP_3" & `Instrument Code` == "A40AL1" & `Measured At` <= "2022-01-24" & `Measured At` >= "2021-12-17"]
example_2_a <- copy(example_2)
example_2_a$Median <- ifelse(is.na(example_2_a$Median), 0, example_2_a$Median)
example_2_b <- copy(example_2)
example_2_b$Median <- (example_2_b$Median - 1.64235) / 0.1394292
smooth_example_2 <- kernel_smoothing0(data = example_2, method = "lc", measure = "median", bw = 11, average = 1.64235, standard_deviation = 0.1394292, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_2_a <- kernel_smoothing0(data = example_2_a, method = "lc", measure = "median", bw = 11, average = 1.64235, standard_deviation = 0.1394292, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_2_b <- kernel_smoothing0(data = example_2_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_2_b
#### Load test data ####
alkaline <- fread(file = "~/nopam_warnings/alkaline-phosphatase-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
creatinine <- fread(file = "~/nopam_warnings/creatinine-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
glucose <- fread(file = "~/nopam_warnings/glucose-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
potassium <- fread(file = "~/nopam_warnings/potassium-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
tsh <- fread(file = "~/nopam_warnings/tsh-from-2021-01-01-to-2023-01-01-raw.csv") |> expand_data()
#### Visualization ####
kernel_smoothing_potassium <- kernel_smoothing(data = potassium, by = c("Instrument Code", "Laboratory Code"), method = "lc", attach = FALSE)
kernel_smoothing_tsh <- kernel_smoothing(data = tsh, by = c("Instrument Code", "Laboratory Code"), method = "lc")
kernel_smoothing_alkaline <- kernel_smoothing(data = alkaline, by = c("Instrument Code", "Laboratory Code"), method = "lc")
kernel_smoothing_glucose <- kernel_smoothing(data = glucose, by = c("Instrument Code", "Laboratory Code"), method = "lc")
kernel_smoothing_creatinine <- kernel_smoothing(data = creatinine, by = c("Instrument Code", "Laboratory Code"), method = "lc")
#### Plotting visualizations ####
ggplot(data = kernel_smoothing_potassium[`Laboratory Code` == "MID_1" & `Measured At` >= "2022-01-01"]) +
geom_line(mapping = aes(x = `Measured At`, y = `Median`, color = `Instrument Code`), alpha = 0.2, show.legend = T) +
geom_line(mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = T) +
scale_y_continuous(limits = c(4, 5)) +
theme_bw()
ggplot(data = kernel_smoothing_tsh[`Laboratory Code` == "TOP_1" & `Measured At` >= "2022-01-01"]) +
geom_line(mapping = aes(x = `Measured At`, y = `Median`, color = `Instrument Code`), alpha = 0.2, show.legend = T) +
geom_line(mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = T) +
facet_wrap(facets = . ~ `Laboratory Code`) + # TOP_1 seems interesting...
scale_y_continuous(limits = c(0, 15)) +
theme_bw()
ggplot(data = kernel_smoothing_alkaline[`Laboratory Code` == "TOP_5" & `Measured At` >= "2021-01-01"]) +
geom_line(mapping = aes(x = `Measured At`, y = `Median`, color = `Instrument Code`), alpha = 0.1, show.legend = T) +
geom_line(mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), alpha = 1, show.legend = T) +
scale_y_continuous(limits = c(60, 100)) +
theme_bw()
ggplot(data = kernel_smoothing_glucose[`Laboratory Code` == "TOP_3" & `Measured At` >= "2021-01-01"]) +
geom_line(mapping = aes(x = `Measured At`, y = `Median`, color = `Instrument Code`), alpha = 0.2, show.legend = T) +
geom_line(mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = T) +
scale_y_continuous(limits = c(5, 6)) +
theme_bw()
ggplot(data = kernel_smoothing_creatinine[`Laboratory Code` == "LOW_4" & `Measured At` >= "2021-01-01"]) +
geom_line(mapping = aes(x = `Measured At`, y = `Median`, color = `Instrument Code`), alpha = 0.2, show.legend = T) +
geom_line(mapping = aes(x = `Measured At`, y = `Smoothed Median`, color = `Instrument Code`), linewidth = 0.75, show.legend = T) +
scale_y_continuous(limits = c(60, 90)) +
theme_bw()
#### Slope warnings data ####
warning_process_potassium <- xwarning_process(data = potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU",], by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_potassium <- kernel_smoothing(data = potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_potassium <- kernel_potassium[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_potassium <- merge(kernel_potassium, warning_process_potassium, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_potassium$`Is Warning` <- ifelse(is.na(warning_process_potassium$`Is Warning`), FALSE, warning_process_potassium$`Is Warning`)
warning_process_tsh <- xwarning_process(data = tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_tsh <- kernel_smoothing(data = tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_tsh <- kernel_tsh[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_tsh <- merge(kernel_tsh, warning_process_tsh, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_tsh$`Is Warning` <- ifelse(is.na(warning_process_tsh$`Is Warning`), FALSE, warning_process_tsh$`Is Warning`)
warning_process_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_alkaline <- kernel_smoothing(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_alkaline <- kernel_alkaline[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_alkaline <- merge(kernel_alkaline, warning_process_alkaline, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_alkaline$`Is Warning` <- ifelse(is.na(warning_process_alkaline$`Is Warning`), FALSE, warning_process_alkaline$`Is Warning`)
warning_process_glucose <- xwarning_process(data = glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),], from = "2022-01-01", to = "2022-12-31", measure = "hyper", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 8, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_glucose <- kernel_smoothing(data = glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "hyper", bw = 11, attach = "y", na_rm = FALSE)
kernel_glucose <- kernel_glucose[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_glucose <- merge(kernel_glucose, warning_process_glucose, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_glucose$`Is Warning` <- ifelse(is.na(warning_process_glucose$`Is Warning`), FALSE, warning_process_glucose$`Is Warning`)
warning_process_creatinine <- xwarning_process(data = creatinine[`Laboratory Code` == "LOW_4",], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_creatinine <- kernel_smoothing(data = creatinine[`Laboratory Code` == "LOW_4",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_creatinine <- kernel_creatinine[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_creatinine <- merge(kernel_creatinine, warning_process_creatinine, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_creatinine$`Is Warning` <- ifelse(is.na(warning_process_creatinine$`Is Warning`), FALSE, warning_process_creatinine$`Is Warning`)
#### Slope warnings plots ####
wp_potassium <- warning_process_plot(data = warning_process_potassium, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "2 months"))
wp_tsh <- warning_process_plot(data = warning_process_tsh, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 2.5, plot = FALSE, plotting_arguments = list("date_tick_distance" = "2 months"))
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_glucose <- warning_process_plot(data = warning_process_glucose, from = "2022-01-01", to = "2022-12-31", measure = "hyper", warning = "slope", strip_percentage = 2.5, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months", "raw_data_alpha" = 0.1))
wp_creatinine <- warning_process_plot(data = warning_process_creatinine, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 5, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months", "raw_data_alpha" = 0.1))
#### Bias warnings data ####
bp_potassium <- xwarning_process(data = potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU"], by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_tsh <- xwarning_process(data = tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",], by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 10, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_glucose <- xwarning_process(data = glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),], by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "hyper", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
bp_creatinine <- xwarning_process(data = creatinine[`Laboratory Code` == "LOW_4",], by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "bias", attach = TRUE, snooze = 0L, bw2 = 30, bw3 = 365, only_warnings = FALSE)
#### Bias warnings plots ####
bp_potassium_plot <- warning_process_plot(data = bp_potassium, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "bias", plot = FALSE, plotting_arguments = list("date_tick_distance" = "1 month"))
bp_tsh_plot <- warning_process_plot(data = bp_tsh, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "bias", plot = FALSE, plotting_arguments = list("date_tick_distance" = "1 month"))
bp_alkaline_plot <- warning_process_plot(data = bp_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "bias", plot = FALSE, plotting_arguments = list("date_tick_distance" = "2 months"))
bp_glucose_plot <- warning_process_plot(data = bp_glucose, from = "2022-01-01", to = "2022-12-31", measure = "hyper", warning = "bias", plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
bp_creatinine_plot <- warning_process_plot(data = bp_creatinine, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "bias", plot = FALSE, plotting_arguments = list("date_tick_distance" = "1 month"))
#### Peer group warnings data ####
pg_potassium <- xwarning_process(data = potassium, by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_potassium <- pg_potassium[`Laboratory Code` == "MID_1" & `Instrument Code` != "AU"]
pg_tsh <- xwarning_process(data = tsh, by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_tsh <- pg_tsh[`Laboratory Code` == "TOP_1" & `Instrument Code` != "CH_VITROS1917",]
pg_alkaline <- xwarning_process(data = alkaline, by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 10, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_alkaline <- pg_alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000",]
pg_glucose <- xwarning_process(data = glucose, by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_glucose <- pg_glucose[`Laboratory Code` == "TOP_3" & (!`Instrument Code` %in% c("A8000", "A8400")),]
pg_creatinine <- xwarning_process(data = creatinine, by = c("Laboratory Code", "Instrument Code"), from = "2022-01-01", to = "2022-12-31", measure = "median", tol = 5, warning = "peer_group", attach = TRUE, snooze = 0L, bw2 = 30, only_warnings = FALSE)
pg_creatinine <- pg_creatinine[`Laboratory Code` == "LOW_4",]
#### Peer group warnings plots ####
pg_potassium_plot <- warning_process_plot(data = pg_potassium, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "peer_group", plot = FALSE)
pg_tsh_plot <- warning_process_plot(data = pg_tsh, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "peer_group", plot = FALSE)
pg_alkaline_plot <- warning_process_plot(data = pg_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "peer_group", plot = FALSE)
pg_glucose_plot <- warning_process_plot(data = pg_glucose, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "peer_group", plot = FALSE)
pg_creatinine_plot <- warning_process_plot(data = pg_creatinine, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "peer_group", plot = FALSE)
pg_potassium_plot
pg_tsh_plot
pg_alkaline_plot
pg_glucose_plot
pg_creatinine_plot
wp_potassium
wp_tsh
wp_alkaline
wp_glucose
wp_creatinine
bp_potassium_plot
bp_tsh_plot
bp_alkaline_plot
bp_glucose_plot
bp_creatinine_plot
not_same_slope_actual[`Analyte Name` == "Alkaline Phosphatase" & `Measured At` <= "2022-05-01"]
not_same_slope_actual[`Instrument Code` == "C16000-01" & `Analyte Name` == "Alkaline Phosphatase" & `Measured At` <= "2022-05-01"]
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 0, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
warning_process_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000",], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_alkaline <- kernel_smoothing(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000",], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_alkaline <- kernel_alkaline[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_alkaline <- merge(kernel_alkaline, warning_process_alkaline, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_alkaline$`Is Warning` <- ifelse(is.na(warning_process_alkaline$`Is Warning`), FALSE, warning_process_alkaline$`Is Warning`)
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 5, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 2.5, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
View(warning_process_potassium)
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 0, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
warning_process_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_alkaline <- kernel_smoothing(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_alkaline <- kernel_alkaline[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_alkaline <- merge(kernel_alkaline, warning_process_alkaline, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_alkaline$`Is Warning` <- ifelse(is.na(warning_process_alkaline$`Is Warning`), FALSE, warning_process_alkaline$`Is Warning`)
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
warning_process_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 300,], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_alkaline <- kernel_smoothing(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 300,], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_alkaline <- kernel_alkaline[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_alkaline <- merge(kernel_alkaline, warning_process_alkaline, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_alkaline$`Is Warning` <- ifelse(is.na(warning_process_alkaline$`Is Warning`), FALSE, warning_process_alkaline$`Is Warning`)
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "3 months"))
wp_alkaline
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "2 months"))
wp_alkaline
warning_process_alkaline <- xwarning_process(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], from = "2022-01-01", to = "2022-12-31", measure = "median", by = c("Laboratory Code", "Instrument Code"), method = "lc", bw1 = 11, tol = 2, dur = 3, warning = "slope", attach = TRUE, approximate = TRUE, stringent_slope_warning = FALSE, only_warnings = FALSE)
kernel_alkaline <- kernel_smoothing(data = alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` != "Architect c16000" & Median <= 150,], by = c("Laboratory Code", "Instrument Code"), method = "lc", measure = "median", bw = 11, attach = "y", na_rm = FALSE)
kernel_alkaline <- kernel_alkaline[`Measured At` >= as.IDate("2022-01-01") - 38]
warning_process_alkaline <- merge(kernel_alkaline, warning_process_alkaline, by = c("Measured At", "Laboratory Code", "Instrument Code"), all.x = TRUE, sort = FALSE)
warning_process_alkaline$`Is Warning` <- ifelse(is.na(warning_process_alkaline$`Is Warning`), FALSE, warning_process_alkaline$`Is Warning`)
wp_alkaline <- warning_process_plot(data = warning_process_alkaline, from = "2022-01-01", to = "2022-12-31", measure = "median", warning = "slope", strip_percentage = 1, plot = FALSE, plotting_arguments = list("date_tick_distance" = "2 months"))
wp_alkaline
not_same_slope_actual[`Instrument Code` == "C16000-01" & `Analyte Name` == "Alkaline Phosphatase" & `Measured At` <= "2022-05-01"]
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-01"]
example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-04"]
example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-10"]
example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
not_same_slope_actual[`Instrument Code` == "C16000-01" & `Analyte Name` == "Alkaline Phosphatase" & `Measured At` <= "2022-05-01"]
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
example_3_b <- copy(example_3)
example_3_b$Median <- (example_3_b$Median - 78.71523) / 19.32050
example_3
not_same_slope_actual[`Instrument Code` == "C16000-01" & `Analyte Name` == "Alkaline Phosphatase" & `Measured At` <= "2022-05-01"]
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
example_3_b <- copy(example_3)
example_3_b$Median <- (example_3_b$Median - 78.71523) / 19.32050
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3
smooth_example_3_a <- kernel_smoothing0(data = example_3_a, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_a
smooth_example_3_b <- kernel_smoothing0(data = example_3_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_b
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`)
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l")
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-02-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
example_3_b <- copy(example_3)
example_3_b$Median <- (example_3_b$Median - 78.71523) / 19.32050
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_a <- kernel_smoothing0(data = example_3_a, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_b <- kernel_smoothing0(data = example_3_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l")
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l")
points(smooth_example_3$`Measured At`, smooth_example_3$Median)
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l", ylim = c(70, 200))
points(smooth_example_3$`Measured At`, smooth_example_3$Median)
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-15" & `Measured At` >= "2022-02-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
example_3_b <- copy(example_3)
example_3_b$Median <- (example_3_b$Median - 78.71523) / 19.32050
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_a <- kernel_smoothing0(data = example_3_a, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_b <- kernel_smoothing0(data = example_3_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l", ylim = c(70, 200))
points(smooth_example_3$`Measured At`, smooth_example_3$Median)
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l")
points(smooth_example_3$`Measured At`, smooth_example_3$Median)
smooth_example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-02-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
example_3_b <- copy(example_3)
example_3_b$Median <- (example_3_b$Median - 78.71523) / 19.32050
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_a <- kernel_smoothing0(data = example_3_a, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_b <- kernel_smoothing0(data = example_3_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
plot(smooth_example_3$`Measured At`, smooth_example_3$`Smoothed Median`, type = "l")
points(smooth_example_3$`Measured At`, smooth_example_3$Median)
?fasteqa::predict_eqa()
example_1
# Three examples for the meeting...
example_1 <- alkaline[`Laboratory Code` == "MID_2" & `Instrument Code` == "A2-B" & `Measured At` <= "2022-01-08" & `Measured At` >= "2021-12-01"]
example_1_a <- copy(example_1)
example_1_a$Median <- ifelse(is.na(example_1_a$Median), 0, example_1_a$Median)
example_1_b <- copy(example_1)
example_1_b$Median <- (example_1_b$Median - 81.3302) / 1.8043
example_1
wp_glucose
wp_alkaline
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3_a <- copy(example_3)
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3
example_3 <- alkaline[`Laboratory Code` == "TOP_5" & `Instrument Code` == "C16000-01" & `Measured At` <= "2022-04-14" & `Measured At` >= "2022-03-07"]
example_3_a <- copy(example_3)
example_3_a$Median <- ifelse(is.na(example_3_a$Median), 0, example_3_a$Median)
example_3_b <- copy(example_3)
example_3_b$Median <- (example_3_b$Median - 78.71523) / 19.32050
example_3
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_a <- kernel_smoothing0(data = example_3_a, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3_b <- kernel_smoothing0(data = example_3_b, method = "lc", measure = "median", bw = 11, average = 0, standard_deviation = 1, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3
example_3[!is.na(Median)]
smooth_example_3 <- kernel_smoothing0(data = example_3[!is.na(Median)], method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3
devtools::load_all(".")
smooth_example_3 <- kernel_smoothing0(data = example_3, method = "lc", measure = "median", bw = 11, average = 78.71523, standard_deviation = 19.32050, attach = FALSE, approximate = TRUE, matrix_approach = TRUE, diagnostics = TRUE, na_rm = FALSE)
smooth_example_3
